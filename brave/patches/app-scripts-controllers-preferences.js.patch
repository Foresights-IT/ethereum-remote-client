diff --git a/app/scripts/controllers/preferences.js b/app/scripts/controllers/preferences.js
index 47fa73746bf4cb1c0cee900564f9d726effea6d3..fbf263c26890c99a6e6ad42d0d4f62f683369e76 100644
--- a/app/scripts/controllers/preferences.js
+++ b/app/scripts/controllers/preferences.js
@@ -62,6 +62,8 @@ export default class PreferencesController {
 
       // ENS decentralized website resolution
       ipfsGateway: 'dweb.link',
+
+      batTokenNetworks: {},
     }, opts.initState)
 
     this.diagnostics = opts.diagnostics
@@ -382,9 +384,48 @@ export default class PreferencesController {
 
     selectedIdentity.lastSelected = Date.now()
     this.store.updateState({ identities, selectedAddress: address })
+    this._ensureBatTokenAdded(address)
     return Promise.resolve(tokens)
   }
 
+  _ensureBatTokenAdded (address) {
+    const tokens = this.store.getState().tokens
+    const assetImages = this.getAssetImages()
+    const { accountTokens } = this._getTokenRelatedStates()
+
+    const BATAddress = '0x0d8775f648430679a709e98d2b0cb6250d2887ef'
+    const networks = ['mainnet', 'rinkeby', 'ropsten', 'goerli', 'kovan']
+    const BATToken = {
+      address: BATAddress,
+      decimals: 18,
+      symbol: 'BAT'
+    }
+
+    if (!(address in accountTokens)) {
+      accountTokens[address] = {}
+    }
+
+    networks.map((network) => {
+      if (!(network in accountTokens[address])) {
+        accountTokens[address][network] = []
+      }
+
+      if (!accountTokens[address][network].find((token) => token.address === BATAddress)) {
+        accountTokens[address][network].push(BATToken)
+      }
+    })
+
+    if (!(BATAddress in assetImages)) {
+      assetImages[BATAddress] = null
+    }
+
+    if (!tokens.find((token) => token.address === BATAddress)) {
+      tokens.push(BATToken)
+    }
+
+    this.store.updateState({ accountTokens, tokens, assetImages })
+  }
+
   /**
    * Getter for the `selectedAddress` property
    *
@@ -639,6 +680,13 @@ export default class PreferencesController {
     return Promise.resolve(domain)
   }
 
+  setBatTokenAdded (network) {
+    const batNetworks = this.store.getState().batTokenNetworks
+    batNetworks[network] = true
+    this.store.updateState({ batTokenNetworks: batNetworks })
+    return Promise.resolve(true)
+  }
+
   //
   // PRIVATE METHODS
   //
